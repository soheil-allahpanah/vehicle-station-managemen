 drop table if exists companies;

 CREATE TABLE public.companies (
 	id int8 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
 	identification_number varchar(256) NOT NULL,
 	company_name varchar(256) NOT NULL,
 	parent_id int8 NULL,
 	created_at timestamp NOT NULL,
 	updated_at timestamp NOT NULL,
 	CONSTRAINT companies_company_name_key UNIQUE (company_name),
 	CONSTRAINT companies_identification_number_key UNIQUE (identification_number),
 	CONSTRAINT companies_pk PRIMARY KEY (id),
 	CONSTRAINT companies_parent_id_fkey FOREIGN KEY (parent_id) REFERENCES public.companies(id)
 );

  drop table if exists stations;

 CREATE TABLE public.stations (
 	id int8 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
 	owner_id int8 not  NULL,
 	station_name varchar(256) NOT NULL,
 	latitude double precision not null,
 	longitude double precision not null,
 	created_at timestamp NOT NULL,
 	updated_at timestamp NOT NULL,
 	CONSTRAINT stations_station_name_key UNIQUE (station_name),
 	CONSTRAINT stations_pk PRIMARY KEY (id)
 );

CREATE OR REPLACE FUNCTION distance(
    lat1 double precision,
    lon1 double precision,
    lat2 double precision,
    lon2 double precision)
  RETURNS double precision AS
'
DECLARE
    R integer = 6371e3; -- Meters
    rad double precision = 0.01745329252;

    φ1 double precision = lat1 * rad;
    φ2 double precision = lat2 * rad;
    Δφ double precision = (lat2-lat1) * rad;
    Δλ double precision = (lon2-lon1) * rad;

    a double precision = sin(Δφ/2) * sin(Δφ/2) + cos(φ1) * cos(φ2) * sin(Δλ/2) * sin(Δλ/2);
    c double precision = 2 * atan2(sqrt(a), sqrt(1-a));
BEGIN
    RETURN R * c;
END
'
  LANGUAGE plpgsql VOLATILE
  COST 100;


drop function if exists get_companies_subsidiaries;

create or replace function get_companies_subsidiaries(_identification_number varchar(256))
 RETURNS TABLE (id int8, identification_number varchar(256), parent_id int8, company_name varchar(256), created_at timestamp, updated_at timestamp)
 as
'
 Begin
 	 RETURN QUERY EXECUTE format(
 	 ''WITH RECURSIVE search_tree(id, identification_number, parent_id, company_name, created_at, updated_at) AS (
 	    SELECT id, identification_number, parent_id, company_name, created_at, updated_at FROM companies c  where c.identification_number = ''''%s''''
 	  		UNION
 	    SELECT c.id, c.identification_number, c.parent_id, c.company_name, c.created_at, c.updated_at
 	    	FROM companies c, search_tree st
 	    	WHERE c.parent_id  = st.id
 		)
 		SELECT * FROM search_tree ;'', _identification_number);
 End;
 '
 language 'plpgsql';

drop function if exists get_station_with_distance;
create or replace function get_station_with_distance(_identification_number varchar(256), _latitude double precision, _longitude double precision)
   RETURNS TABLE (company_id int8
   , station_id int8
   , company_name varchar(256)
   , station_name varchar(256)
   , latitude double precision
   , longitude double precision
   , identification_number varchar(256)
   , parent_id int8
   , distance double precision
   , created_at timestamp
   , updated_at timestamp
   )
   as
   '
   Begin
   	 RETURN QUERY EXECUTE format(''
  WITH RECURSIVE search_tree(company_id, station_id, company_name,  station_name, latitude, longitude, identification_number, parent_id, distance, created_at, updated_at) AS (
   	    SELECT c.id as company_id, s.id as station_id, c.company_name, s.station_name, s.latitude, s.longitude, c.identification_number, c.parent_id, distance(%s, %s, s.latitude, s.longitude) as distance, c.created_at, c.updated_at
   	    FROM companies c, stations s where c.id  = s.owner_id and c.identification_number = ''''%s''''
   	  		UNION
   	    SELECT c.id as company_id, sa.id as station_id, c.company_name , sa.station_name, sa.latitude, sa.longitude, c.identification_number, c.parent_id, distance(%s, %s, sa.latitude, sa.longitude) as distance, c.created_at, c.updated_at
   	    	FROM companies c, stations sa, search_tree st
   	    	WHERE c.parent_id  = st.company_id and c.id = sa.owner_id
   		)
   		SELECT
   		company_id, station_id, company_name,  station_name, latitude, longitude, identification_number, parent_id, distance , created_at, updated_at
   FROM search_tree order by distance asc ;

  '', _latitude, _longitude, _identification_number , _latitude, _longitude);
   End;
   '
   language 'plpgsql';
